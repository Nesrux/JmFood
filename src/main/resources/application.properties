#login e senha do localhost, juntamente com o caminho do localhost
spring.datasource.url=jdbc:mysql://localhost/Jmfood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=marcos10

#criar DDL automaticamente, (cria e insere dados com o aplication properties eas entidades)
# # spring.jpa.generate-ddl=true
#Toda vez que a aplicaÃ§Ã£o Ã© iniciada, ela dropa atabela, atualiza a tablea ou cria a tablea, dependendo do valor que
#esta configurado
# # spring.jpa.hibernate.ddl-auto=create
#Ver SQL GERADA
spring.jpa.show-sql=true

#ativa a possibilidade do Jpa criar um arquivo separado com todos os inserts e criação de tabelas
# #spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#"fala" para o JPA onde esse arquivo vai ser salv e qual ï¿½ o nome do arquivo, que nesse caso ï¿½ o ddl.sql
# #spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=scr/main/resources/ddl.sql
# (DEPOIS DE CRIAR ESSE ARQUIVO, APAGAR/COMENTAR ESSA CONFIG PARA Nï¿½O FICAR GERANDO VARIOS ARQUIVOS IGUAIS :D)

#utilizada para poder criar FKS nativamente
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
#fala para o flyway onde procurar as pastas que ele vai executar, por padrÃ£o Ã© db/migration,
#mas como eu adicionoi mais 1 pasta ele tem que sobrescrever essa configurado!
spring.flyway.locations=classpath:db/migration,classpath:db/imports

#para comprimir o tamanho da Resposta de requisição
server.compression.enabled=true

#para definir o tamanho minimo que uma resposta será comprimida padrão é 2KB
#server.compression.min-response-size=

#configura o minimo de configuraï¿½ï¿½es simultaneas
spring.datasource.hikari.minimum-idle=2
#configura o maximo de conecÃ§Ãµes simultanias
spring.datasource.hikari.maximum-pool-size=5
#configura o tempo que a coneÃ§Ãµes excedentes ficam em aberto (em milisegundos)
spring.datasource.hikari.idle-timeout=300000
#(POR PADRï¿½O NO HIKARI O MINIMO ï¿½ 10 E O MAXIMO ï¿½ 10 E O TEMPO DE TIMEOUT ï¿½ 10S, OU SEJA NAO DESLIGA!)

#Permite o laï¿½amento de exceptions quando a entidade recebe uma propriedade que nao existe(padrao ï¿½ ignorar)
spring.jackson.deserialization.fail-on-unknown-properties=true
#permite o lanï¿½amenro de Exceptions quando a entidade esta com a anotaï¿½ï¿½o @jsoonIgnore
spring.jackson.deserialization.fail-on-ignored-properties=true

spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false
#Deixa a serializaÃ§Ã£o em snake case EX : taxa_frete
#spring.jackson.property-naming-strategy=SNAKE_CASE

#configura o tamanho maximo dos arquivos que vem na requisiÃ§Ã£o
#spring.servlet.multipart.max-file-size=20KB
#configura o tamanho maximo da requisiÃ§Ã£o que vem por http    
#spring.servlet.multipart.max-request-size=20MB


#se for local, precisa criar uma pasta em c://user/dowload com o nome BANCO_DE_FOTOS
#ou mudar o .local.diretorio-fotos para uma pasta que vocÃª quer
jmfood.storage.tipo=local
#LOCAL									
jmfood.storage.local.diretorio-fotos=C:\\Users\\jucaj\\Downloads\\BANCO_DE_FOTOS

#AMAZON
jmfood.storage.s3.id-chave-acesso={AwsIdChaveAcesso}
jmfood.storage.s3.chave-acesso-secreta ={AwschaveAcessoSecreta}
jmfood.storage.s3.bucket={AwsBucket}
jmfood.storage.s3.regiao=us-east-1
jmfood.storage.s3.diretorio-fotos={AwsCatalogo}

#EMAIL
jmfood.email.remetente=naoresponderjmfood@gmail.com
jmfood.email.host=smtp.gmail.com
jmfood.email.port=587
#existem 3 opÃ§oes aqui, mock, prod e sandbox
jmfood.email.impl=mock
jmfood.email.sandbox.destinatario=jmfoodmail@gmail.com
#jmfood.email.password={senha} Colocar a senha de 16 caracteres do gmail aqui

#freemarker
spring.freemarker.settings.locale=pt_BR

